@page "/carsharing"
@rendermode InteractiveServer
@using Database.Models
@using Layout
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BlazorApp1.Database.ApplicationDbContext> DbFactory

<h3>Список автомобилей</h3>
<table class="table">
    <thead>
        <tr>
            <th>Марка</th>
            <th>Модель</th>
            <th>Время использования</th>
            <th>Стоимость аренды</th>
            <th>ФИО клиента</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var car in DbFactory.CreateDbContextAsync().Result.Cars)
        {
            <tr>
                <td>@car.Brand</td>
                <td>@car.Model</td>
                <td>@car.WorkTime</td>
                <td>@car.Cost</td>
                <td>@($"{car.Client.LastName} {car.Client.FirstName} {car.Client.Patronymic}")</td>
            </tr>
        }
    </tbody>
</table>

<div style="text-align: right;">
    <button class="btn btn-primary" @onclick="ToggleAddCarFields">Добавить автомобиль</button>
</div>


@if (showAddCarForm)
{
    <div>
        <h4>Добавить новый автомобиль:</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Марка</th>
                    <th>Модель</th>
                    <th>Время использования</th>
                    <th>Стоимость аренды</th>
                    <th>ФИО клиента</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td> <input type="text" class="form-control" @bind="newCar.Brand" placeholder="Id"> </td>
                    <td> <input type="text" class="form-control" @bind="newCar.Model" placeholder="Время использования"> </td>
                    <td> <input type="text" class="form-control" @bind="newCar.WorkTime" placeholder="Стоимость аренды"> </td>
                    <td> <input type="text" class="form-control" @bind="newCar.Cost" placeholder="Id клиента"> </td>
                    <td> 
                        <InputSelect @bind-Value="newCar.ClientID">

                        </InputSelect>
                        <input type="text" class="form-control" @bind="newCar.ClientID" placeholder="Id клиента"> 
                    </td>
                </tr>
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="SaveCar">Сохранить</button>
        <button class="btn btn-danger" @onclick="CancelAddCar">Отмена</button>
    </div>
}
@*
<p></p>
<p></p>

<h3>Список заказов</h3>
<table class="table">
    <thead>
        <tr>
            <th>Номер заказа</th>
            <th>ФИО клиента</th>
            <th>Бонусная скидка, %</th>
            <th>Итого к оплате</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in dataService.GetOrders())
        {
            <tr>
                <td>@order.OrderId</td>
                <td>@($"{order.Order.Client.LastName} {order.Order.Client.FirstName} {order.Order.Client.Patronymic}")</td>
                <td>@order.BonusDiscount</td>
                <td>@order.TotalToPay</td>
            </tr>
        }
    </tbody>
</table>

<div style="align-items:flex-end">
    <h4>Общая сумма по заказам: @dataService.GetTotalOrdersSum()</h4>
</div>
 *@
@code {
    DataService dataService;

    Car newCar = new Car();

    bool showAddCarForm = false;

    void ToggleAddCarFields()
    {
        showAddCarForm = true;
    }

    void SaveCar()
    {
        // var order = new Order
        //     {
        //         Client = newCar.Client,
        //         ClientId = newCar.ClientID,
        //         TotalToPay = newCar.Cost - newCar.Cost * dataService.GetDiscountByClientId(newCar.ClientID)
        //     };

        // dataService.AddOrder(order);
        dataService.AddCar(newCar);
        newCar = new Car();
        showAddCarForm = false;
    }

    void CancelAddCar()
    {
        newCar = new Car();
        showAddCarForm = false;
    }

    protected override void OnInitialized()
    {
        dataService = new DataService();
    }

    public class DataService
    {
        private List<Car> _cars;
        private List<Client> _clients;
        private List<Order> _orders;
        private List<Order> _orderInfo;
        private List<double> _discounts;

        public DataService()
        {
            _cars = new List<Car>();
            _clients = new List<Client>();
            _orders = new List<Order>();
            _discounts = new List<double>();

            _discounts.AddRange(new List<double>
            {
                0.12, 0.30, 0.10, 0.15, 0.2, 0.2
            });

            _clients.AddRange(new List<Client>
            {
                new Client { LastName = "Байгушев", FirstName = "Евфимий", Patronymic = "Дмитриевич" },
                new Client { LastName = "Алексеев", FirstName = "Илья", Patronymic = "Владимирович"},
                new Client { LastName = "Сергеев", FirstName = "Кирилл", Patronymic = "Федорович"},
                new Client { LastName = "Владимиров", FirstName = "Евгений", Patronymic = "Александрович"},
                new Client { LastName = "Федоров", FirstName = "Андрей", Patronymic = "Константинович"},
                new Client { LastName = "Яковлев", FirstName = "Роман", Patronymic = "Геннадьевич"}
            });
        }

        public List<Car> GetCars()
        {
            return _cars;
        }

        public List<Order> GetOrders()
        {
            // var ordersInfo = _orders.Zip(_clients, (order, client) =>
            //          new OrderInf { order.Id, client.FirstName, order.BonusDiscount * 100, order.TotalToPay });

            // var a = _orders.Join(_clients, o => o.ClientId, c => c.Id, new { Id = o.i})

            // return ordersInfo.ToList();
            throw new NotImplementedException();
        }

        public void AddCar(Car carItem)
        {
            _cars.Add(carItem);
        }

        public void AddOrder(Order order)
        {
            _orders.Add(order);
        }

        public double GetDiscountByClientId(int client_id)
        {
            return _discounts.ElementAt(client_id - 1);
        }

        // public double GetTotalOrdersSum()
        // {
        //     return _orders.Sum(item => item.TotalToPay);
        // }
    }
}
